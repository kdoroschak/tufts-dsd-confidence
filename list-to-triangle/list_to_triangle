#!/usr/bin/env python2.7

# list_to_triangle
# Thomas Schaffner

# *******************************************************************
# Takes in a list of DSD values and an ordered
# list of protein names. Uses these to create
# and output a file containing the upper-right
# corner of a matrix representing DSD values
# (excluding the diagonal, which is all 0).
# *******************************************************************

# Import
import sys
import argparse

# Functions *********************************************************

# Opens filename with option or exits program if file doesn't open.
def open_or_abort(filename, option=None):
    try:
        if option != None:
            opened = open(filename, option)
        else:
            opened = open(filename)
    except:
        print "Could not open file", filename
        exit()
    return opened

# extract_proteins(infile)
# Description: Creates a dictionary which maps protein
#   names to their indices.
# Precondition: infile is a file containing exactly
#   one protein name per line.
# Postcondition: Returns a dictionary.
def extract_proteins(infile):
    # Indexing from 0
    count = 0
    proteins = dict()

    for line in infile:
        protein = line[0:-1] #drop '\n'

        proteins[protein] = count
        count += 1

    return proteins

# extract_matrix(infile, indices)
# Description: Creates the upper triangle of a matrix
#   representing DSD values.
# Precondition: infile is a file containing tab separated
#   nameA nameB DSD. indices is a dictionary with protein indices.
# Postcondition: Returns the upper triangle of a matrix.
def extract_matrix(infile, indices):
    p_count = len(indices)

    # Create two-dimensional, triangular matrix.
    matrix = []

    for row in xrange(p_count-1):
        matrix.append([])
        for col in xrange(p_count-row-1):
            matrix[row].append(None)

    count = 0

    # Read in DSD value and two proteins, mapping to matrix
    for line in infile:
        count += 1
        # Split line
        cols = line.split('\t')

        # Check for 'NotConnected'
        if cols[2][0:-1] == 'NotConnected':
            continue

        # Extract indices and dsd float
        indexA = indices[cols[0]]
        indexB = indices[cols[1]]
        dsd = float(cols[2][0:-1])

        # Sort indices
        row = min(indexA, indexB)
        col = max(indexA, indexB)

        # Store DSD value
        matrix[row][col-row-1] = dsd

    return matrix


# write_matrix(matrix_outfile, matrix)
# Description: Writes matrix to file
# Precondition: matrix_outfile is a file open for writing.
#   matrix is a list of lists.
# Postcondition: Writes matrix to matrix_outfile, tab separated.
def write_matrix(matrix_outfile, matrix):
    for row in matrix:
        line = []
        for val in row:
            line.append(str(val))
        line = '\t'.join(line)
        matrix_outfile.write(line)
        matrix_outfile.write('\n')


# **** Main *********************************************************
def main():

    # Set up argument parser
    temp = "Creates a partial DSD matrix."
    temp += " For use with majorityvote software."
    parser = argparse.ArgumentParser(description=temp)

    parser.add_argument("-d", "--dsd", help="DSD list input file.",
                        default=None)
    parser.add_argument("-p", "--plist", help="Ordered list of"+
                        " proteins input file.", default=None)
    parser.add_argument("-m", "--matrix", help="Output file name.",
                        default=None)

    # Parse options
    options = parser.parse_args()

    # Ensure there are enough arguments
    dsd = options.dsd
    plist = options.plist
    trimat = options.matrix

    if (dsd == None) or (plist == None) or (trimat == None):
        print "Error: Too few arguments."
        exit()

    # Open files
    dsd_in = open_or_abort(dsd)
    prot_list_in = open_or_abort(plist)
    matrix_out = open_or_abort(trimat, option="w")

    # Extract dictionary of proteins (mapped to indices)
    print "Organizing protein indices."
    proteins = extract_proteins(prot_list_in)

    # Extract DSD data and put it into a matrix
    print "Building matrix."
    matrix = extract_matrix(dsd_in, proteins)

    # Write to file
    print "Writing matrix to file."
    write_matrix(matrix_out, matrix)
    
    # Close files
    dsd_in.close()
    prot_list_in.close()
    matrix_out.close()

# Call main
if __name__ == "__main__":
    main() 