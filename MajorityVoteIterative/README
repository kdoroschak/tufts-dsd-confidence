usage: DSDmv.py [-h] [-l LABEL] [-r RDINDEX] [-k K] [-o OUTFILE] [-d DSDFILE]
                [-t NEIGHBOR] [-m {0,1,2}]
                infile

parses PPIs from infile and do majority voting, k-fold cross validation, use
CalculatePerformance.py calculate performance

positional arguments:
  infile                read PPIs from infile

optional arguments:
  -h, --help            show this help message and exit
  -l LABEL, --label LABEL
                        label list file
  -r RDINDEX, --rdindex RDINDEX
                        file of random indeces for labeled nodes
  -k K                  k-fold cross validation, 2 by default
  -o OUTFILE, --outfile OUTFILE
                        output prediction file name, tab delimited tables
  -d DSDFILE, --dsdfile DSDFILE
                        dsd file name
  -t NEIGHBOR, --neighbor NEIGHBOR
                        number of lowest DSD neighbors used
  -m {0,1,2}, --mode {0,1,2}
                        majority voting modes: 0 for ordinary majority voting;
                        1 for unweighted DSD; 2 for weighted DSD. Type 0 by
                        default
                        



Example:
### to conduct 2-fold cross validation, DSD weighted majority voting:
python DSDmv.py -l template//firstlevellabel.list template//BakerAdjacency.list -k 2 -o haha.test -d template//ExactDSD.list -r template//firstLevelRandIndex.txt -m 2 -t 10

### to conduct 2-fold cross validation, DSD unweighted majority voting:
python DSDmv.py -l template//firstlevellabel.list template//BakerAdjacency.list -k 2 -o haha.test -d template//ExactDSD.list -r template//firstLevelRandIndex.txt -m 1 -t 10

### to conduct 2-fold cross validation, ordinary majority voting:
python DSDmv.py -l template//firstlevellabel.list template//BakerAdjacency.list -k 2 -o haha.test -d template//ExactDSD.list -r template//firstLevelRandIndex.txt -m 0