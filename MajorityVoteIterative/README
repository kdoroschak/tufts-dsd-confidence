ITERATIVE MAJORITY VOTE
* For directory structure, see the bottom of this document.

usage: DSDmv.py [-h] [-l LABEL] [-r RDINDEX] [-k K] [-o OUTFILE] [-d DSDFILE]
                [-t NEIGHBOR] [-i ITERFOLDER] [-m {0,1,2,3}]
                [-p COMPLETEPROTEINLIST] [-c COVEREDLABELS]
                infile

parses PPIs from infile and do majority voting

positional arguments:
  infile                read PPIs from infile

optional arguments:
  -h, --help            show this help message and exit
  -l LABEL, --label LABEL
                        label list file
  -r RDINDEX, --rdindex RDINDEX
                        file of random indeces for labeled nodes
  -k K                  k-fold cross validation, 2 by default
  -o OUTFILE, --outfile OUTFILE
                        output prediction file name, tab delimited tables
  -d DSDFILE, --dsdfile DSDFILE
                        triangular matrix dsd file name
  -t NEIGHBOR, --neighbor NEIGHBOR
                        number of lowest DSD neighbors used
  -i ITERFOLDER, --iterfolder ITERFOLDER
                        top level folder containing exactly one folder of input
                        files (trimat, protein key and protein list) per iteration
  -m {0,1,2,3}, --mode {0,1,2,3}
                        majority voting modes: 0 for ordinary majority voting;
                        1 for unweighted DSD; 2 for weighted DSD; 3 for
                        iterative weighted DSD. Type 0 by default
  -p COMPLETEPROTEINLIST, --completeProteinList COMPLETEPROTEINLIST
                        complete list of all proteins to be predicted, one
                        protein per line
  -c COVEREDLABELS, --coveredlabels COVEREDLABELS
                        output file of annotations of covered labels. same
                        size as .ann

###########################################################################

For iterfolder:
    Must have one folder which contains only subfolders with sortable names.
    These subfolders must each contain:
        one DSD triangular matrix file (.trimat)
        one protein key file (.key, same order and size as the trimat)
        and one list of proteins to be predicted (.protein, <= size of key) 

Example:
iterations/
iterations/iter1/
iterations/iter2/
iterations/iter1/somename.trimat
iterations/iter1/somename.protein.key
iterations/iter1/somename.protein
iterations/iter2/anyname.trimat
iterations/iter2/anyname.protein.key
iteratiosn/iter2/aname.protein

coveredlabels is an annotations file. However, only the proteins which were covered (using the random indices file) for majority vote have labels in the coveredlabels file. (for use with CalculatePerformanceIterative)
